!function(t){var r={};function e(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=r,e.d=function(t,r,n){e.o(t,r)||Object.defineProperty(t,r,{configurable:!1,enumerable:!0,get:n})},e.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},e.n=function(t){var r=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(r,"a",r),r},e.o=function(t,r){return Object.prototype.hasOwnProperty.call(t,r)},e.p="",e(e.s=1)}([function(t,r){var e=t.exports={};function n(t){return(t%360+360)%360}function o(t,r,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?t+6*(r-t)*e:e<.5?r:e<2/3?t+(r-t)*(2/3-e)*6:t}e.rgb2Hsl=function(t,r,e){if("object"==typeof t){const n=t;t=n.r,r=n.g,e=n.b}t=255===t?1:t%255/parseFloat(255),r=255===r?1:r%255/parseFloat(255),e=255===e?1:e%255/parseFloat(255);var n,o,a=Math.max(t,r,e),s=Math.min(t,r,e),i=(a+s)/2;if(a===s)n=o=0;else{var h=a-s;switch(o=i>.5?h/(2-a-s):h/(a+s),a){case t:n=(r-e)/h+(r<e?6:0);break;case r:n=(e-t)/h+2;break;case e:n=(t-r)/h+4}n/=6}return{h:Math.round(360*n),s:Math.round(100*o),l:Math.round(100*i)}},e.rgb_to_hsl=e.rgbToHsl=e.rgb2Hsl,e.rgb2Hsv=function(t,r,e){if("object"==typeof t){const n=t;t=n.r,r=n.g,e=n.b}t=255===t?1:t%255/parseFloat(255),r=255===r?1:r%255/parseFloat(255),e=255===e?1:e%255/parseFloat(255);var n,o,a=Math.max(t,r,e),s=Math.min(t,r,e),i=a,h=a-s;if(o=0===a?0:h/a,a===s)n=0;else{switch(a){case t:n=(r-e)/h+(r<e?6:0);break;case r:n=(e-t)/h+2;break;case e:n=(t-r)/h+4}n/=6}return{h:Math.round(360*n),s:Math.round(100*o),v:Math.round(100*i)}},e.rgb_to_hsv=e.rgbToHsv=e.rgb2Hsv,e.hsl2Rgb=function(t,r,e){if("object"==typeof t){const n=t;t=n.h,r=n.s,e=n.l}var a,s,i;if(t=360===(t=n(t))?1:t%360/parseFloat(360),r=100===r?1:r%100/parseFloat(100),e=100===e?1:e%100/parseFloat(100),0===r)a=s=i=e;else{var h=e<.5?e*(1+r):e+r-e*r,c=2*e-h;a=o(c,h,t+1/3),s=o(c,h,t),i=o(c,h,t-1/3)}return{r:Math.round(255*a),g:Math.round(255*s),b:Math.round(255*i)}},e.hsl_to_rgb=e.hslToRgb=e.hsl2Rgb,e.hsv2Rgb=function(t,r,e){if("object"==typeof t){const n=t;t=n.h,r=n.s,e=n.v}t=360===(t=n(t))?1:t%360/parseFloat(360)*6,r=100===r?1:r%100/parseFloat(100),e=100===e?1:e%100/parseFloat(100);var o=Math.floor(t),a=t-o,s=e*(1-r),i=e*(1-a*r),h=e*(1-(1-a)*r),c=o%6,u=[e,i,s,s,h,e][c],b=[h,e,e,i,s,s][c],f=[s,s,h,e,e,i][c];return{r:Math.floor(255*u),g:Math.floor(255*b),b:Math.floor(255*f)}},e.hsv_to_rgb=e.hsv2Rgb,e.hsvToRgb=e.hsv2Rgb,e.rgb2Hex=function(t,r,e){if("object"==typeof t){const n=t;t=n.r,r=n.g,e=n.b}return t=Math.round(t).toString(16),r=Math.round(r).toString(16),e=Math.round(e).toString(16),"#"+(t=1===t.length?"0"+t:t)+(r=1===r.length?"0"+r:r)+(e=1===e.length?"0"+e:e)},e.rgb_to_hex=e.rgbToHex=e.rgb2Hex,e.hex2Rgb=function(t){var r=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);return r?{r:parseInt(r[1],16),g:parseInt(r[2],16),b:parseInt(r[3],16)}:null},e.hex_to_rgb=e.hexToRgb=e.hex2Rgb,e.hsv2Hex=function(t,r,n){var o=e.hsv2Rgb(t,r,n);return e.rgb2Hex(o.r,o.g,o.b)},e.hsv_to_hex=e.hsv2Hex,e.hsvToHex=e.hsv2Hex,e.hex2Hsv=function(t){var r=e.hex2Rgb(t);return e.rgb2Hsv(r.r,r.g,r.b)},e.hex_to_hsv=e.hexToHsv=e.hex2Hsv,e.hsl2Hex=function(t,r,n){var o=e.hsl2Rgb(t,r,n);return e.rgb2Hex(o.r,o.g,o.b)},e.hsl_to_hex=e.hslToHex=e.hsl2Hex,e.hex2Hsl=function(t){var r=e.hex2Rgb(t);return e.rgb2Hsl(r.r,r.g,r.b)},e.hex_to_hsl=e.hexToHsl=e.hex2Hsl,e.rgb2Cmyk=function(t,r,e){if("object"==typeof t){const n=t;t=n.r,r=n.g,e=n.b}var n=t/255,o=r/255,a=e/255,s=1-Math.max(n,o,a),i=(1-o-s)/(1-s),h=(1-a-s)/(1-s);return{c:((1-n-s)/(1-s)).toFixed(3),m:i.toFixed(3),y:h.toFixed(3),k:s.toFixed(3)}},e.rgb_to_cmyk=e.rgbToCmyk=e.rgb2Cmyk,e.cmyk2Rgb=function(t,r,e,n){if("object"==typeof t){const o=t;t=o.c,r=o.m,e=o.y,n=o.k}var o=255*(1-t)*(1-n),a=255*(1-r)*(1-n),s=255*(1-e)*(1-n);return{r:Math.floor(o),g:Math.floor(a),b:Math.floor(s)}},e.cmyk_to_rgb=e.cmykToRgb=e.cmyk2Rgb,e.hsv2Hsl=function(t,r,e){if("object"==typeof t){const n=t;t=n.h,r=n.s,e=n.v}var n=(2-r)*e/2;return 0!==n&&(r=100===n?0:n<50?r*e/(2*n):r*e/(2-2*n)),{h:t,s:r,l:n}},e.hsv_to_hsl=e.hsvToHsl=e.hsv2Hsl,e.hsl2Hsv=function(t,r,e){if("object"==typeof t){const n=t;t=n.h,r=n.s,e=n.l}return r*=e<50?e:100-e,{h:t,s:Math.floor(2*r/(e+r)),v:Math.floor(e+r)}},e.hsl_to_hsv=e.hslToHsv=e.hsl2Hsv,e.parseCss=function(t){if(t.indexOf("#")>-1)return e.hex2Rgb(t);const r=t.split("(")[0],n=t.split("(")[1].split(")")[0].split(",");return r.split("").reduce(function(t,r,e){const o=t;return o[r]=parseFloat(n[e]),o},{})},e.parse_css=e.parseCss,e.stringify=function(t){return Object.keys(t).join("")+"("+Object.keys(t).map(function(r){var e=t[r];return"s"!==r&&"v"!==r&&"l"!==r||(e+="%"),e}).join(", ")+")"},e.random=function(){return"#"+("000000"+Math.floor(16777215*Math.random()).toString(16)).substr(-6)},e.rotateHue=function(t,r){void 0===r&&(r=0);const e="object"==typeof t?(t.h+r)%360:(t+r)%360,n=e<0?360+e:e;return"object"==typeof t?Object.assign(t,{h:n}):n}},function(t,r,e){"use strict";var n=e(0),o=e(2),a=0,s=.2,i=20,h=[{beg:0,end:40},{beg:180,end:240}],c=10;function u(t,r){return r.reduce(function(r,e){return 0==r.distance?{distance:0,border:0}:e.beg<t.h&&e.end>t.h?{distance:0,border:0}:e.beg<t.h+360&&e.end>t.h+360?{distance:0,border:0}:function(){for(var t={distance:1e3,border:0},r=0;r<arguments.length;r++)t.distance>arguments[r].distance&&(t=arguments[r]);return t}({distance:Math.abs(t.h-e.beg),border:e.beg},{distance:Math.abs(t.h-e.end),border:e.end},{distance:Math.abs(t.h+360-e.beg),border:e.beg},{distance:Math.abs(t.h+360-e.end),border:e.end},{distance:r.distance,border:r.border})},{distance:1e3,border:0})}function b(t,r){return t.map(function(t){return{beg:t.beg+r,end:t.end+r}})}window.onload=function(){!function(){var t=document.getElementsByTagName("img")[0];t.crossOrigin="Anonymous",t.setAttribute("crossOrigin","");var r=document.getElementById("canvas"),e=r.getContext("2d");r.width=t.width,r.height=t.height,e.drawImage(t,0,0);for(var f,d=e.getImageData(0,0,r.width,r.height),g=d.data,l=[],v=0;v<g.length;v+=4)l.push(n.rgb_to_hsl({r:g[v],g:g[v+1],b:g[v+2]}));for(var p=h,m=1/0,x=0,M=0;M<=360;M+=c){p=b(h,M);var y=l.reduce(function(t,r){return t+u(r,p).distance},0);m>y&&(x=M),m=Math.min(m,y)}p=b(h,M),l=l.map(function(t){var r=u(t,p);return t.distance=r.distance,t.border=r.border,t},0),console.log(x);var _=function(t,r,e){var n=t;return n=n.map(function(t){var r;return 0!=t.distance?(Math.abs(t.h-t.border)<Math.abs(t.h+360-t.border)?r=t:(r=t).h+=360,r.h>r.border?r.h=r.border-i+i*(1-o(a,s).pdf(r.h-r.border)):r.h=r.border+i-i*(1-o(a,s).pdf(r.border-r.h)),r):t})}(l);!function(){var t=0;_.forEach(function(r){r.h>360&&(r.h-=360),f=n.hslToRgb({h:r.h,s:r.s,l:r.l}),g[t]=f.r,g[t+1]=f.g,g[t+2]=f.b,t+=4}),e.putImageData(d,0,0),console.log("Программа выполнена успешно!")}()}()}},function(t,r,e){!function(t){var r=function(t){var r=Math.abs(t),e=1/(1+r/2),n=e*Math.exp(-r*r-1.26551223+e*(1.00002368+e*(.37409196+e*(.09678418+e*(e*(.27886807+e*(e*(1.48851587+e*(.17087277*e-.82215223))-1.13520398))-.18628806)))));return t>=0?n:2-n},e=function(t,r){if(r<=0)throw new Error("Variance must be > 0 (but was "+r+")");this.mean=t,this.variance=r,this.standardDeviation=Math.sqrt(r)};e.prototype.pdf=function(t){var r=this.standardDeviation*Math.sqrt(2*Math.PI);return Math.exp(-Math.pow(t-this.mean,2)/(2*this.variance))/r},e.prototype.cdf=function(t){return.5*r(-(t-this.mean)/(this.standardDeviation*Math.sqrt(2)))},e.prototype.ppf=function(t){return this.mean-this.standardDeviation*Math.sqrt(2)*function(t){if(t>=2)return-100;if(t<=0)return 100;for(var e=t<1?t:2-t,n=Math.sqrt(-2*Math.log(e/2)),o=-.70711*((2.30753+.27061*n)/(1+n*(.99229+.04481*n))-n),a=0;a<2;a++){var s=r(o)-e;o+=s/(1.1283791670955126*Math.exp(-o*o)-o*s)}return t<1?o:-o}(2*t)},e.prototype.mul=function(t){if("number"==typeof t)return this.scale(t);var r=1/this.variance,e=1/t.variance;return o(r+e,r*this.mean+e*t.mean)},e.prototype.div=function(t){if("number"==typeof t)return this.scale(1/t);var r=1/this.variance,e=1/t.variance;return o(r-e,r*this.mean-e*t.mean)},e.prototype.add=function(t){return n(this.mean+t.mean,this.variance+t.variance)},e.prototype.sub=function(t){return n(this.mean-t.mean,this.variance+t.variance)},e.prototype.scale=function(t){return n(this.mean*t,this.variance*t*t)};var n=function(t,r){return new e(t,r)},o=function(t,r){return n(r/t,1/t)};t(n)}(function(r){t.exports=r})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,